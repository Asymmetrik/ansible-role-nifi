---
# tasks file for nifi
- name: Create nifi user and group
  user:
    name: nifi
    state: present
    createhome: no
    #uid: "{{ nifi_user_pid }}"

- name: Ensure nifi files are world-readable
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    owner: nifi
    group: nifi
    #mode: "a+rX"

  with_items:
    - "{{ nifi_base_dir }}"
    - "{{ nifi_etc_dir }}"
    - "{{ nifi_log_dir }}"
    - "{{ nifi_pid_dir }}"
    - "{{ nifi_data_dir }}"

- name: Download NiFi binaries for version {{ nifi_version }}
  unarchive:
    src: "http://apache.uib.no/nifi/{{ nifi_version }}/nifi-{{ nifi_version }}-bin.tar.gz"
    dest: "{{ nifi_base_dir }}"
    owner: nifi
    group: nifi
    remote_src: yes
    creates: "{{ nifi_base_dir }}/nifi-{{ nifi_version }}/bin/nifi.sh"

- name: Download NiFi-Toolkit binaries for version {{ nifi_version }}
  unarchive:
    src: "http://apache.uib.no/nifi/{{ nifi_version }}/nifi-toolkit-{{ nifi_version }}-bin.tar.gz"
    dest: "{{ nifi_base_dir }}"
    owner: nifi
    group: nifi
    remote_src: yes
    creates: "{{ nifi_base_dir }}/nifi-toolkit-{{ nifi_version }}/bin/tls-toolkit.sh"

- name: Download NiFi simple file-auth
  get_url:
    url: "https://big.sherpaconsulting.no/downloads/nifi-file-identity-provider-nar-1.0.0.nar"
    dest: "{{ nifi_base_dir }}/nifi-{{ nifi_version }}/lib"
    mode: "0660"
    owner: nifi
    group: nifi

- name: Ensure nifi-toolkit symlink
  file:
    src: "{{ nifi_base_dir }}/nifi-toolkit-{{ nifi_version }}"
    dest: "{{ nifi_toolkit_home }}"
    state: link
    owner: nifi
    group: nifi

- name: Create nifi-toolkit tls-server config
  when: inventory_hostname in groups['tls_server']
  template:
    src: tls-config-server.json
    dest: "{{ nifi_base_dir }}/nifi-toolkit-{{ nifi_version }}/conf/config-server.json"
    owner: nifi
    group: nifi
    mode: 0600
  notify: restart nifi-toolkit
  tags: [ config ]

- name: Create nifi-toolkit systemd service
  when: inventory_hostname in groups['tls_server']
  template:
    src: nifi-toolkit.service.j2
    dest: "{{ nifi_toolkit_service }}"
    owner: root
    group: root
    mode: 0644
  notify:
    - reload systemctl
    - restart nifi-toolkit

- meta: flush_handlers

- name: Setup nifi client sertificates
  command: "{{ nifi_base_dir }}/nifi-toolkit-{{ nifi_version }}/bin/tls-toolkit.sh client -c {{ nifi_tls_server }} -t {{ nifi_tls_token }} -p {{ nifi_tls_port }}"
  args:
    chdir: "{{ nifi_etc_dir }}"
    creates: "{{ nifi_etc_dir }}/nifi-cert.pem"

#### set the same key trust pass for all nodes
- name: Get keystore pass
  script: pull-keystore-pass.sh {{ nifi_data_dir }}/etc/config.json keyStorePassword
  register: keystore


- name: Get truststore pass
  script: pull-keystore-pass.sh {{ nifi_data_dir }}/etc/config.json trustStorePassword
  register: truststore

- name: set passwords
  vars:
    keystorepass: "{{ keystore.stdout_lines[0] }}"
    truststorepass: "{{ truststore.stdout_lines[0] }}"
  script: set-new-key-trust-pass.sh {{ nifi_key_alias }} {{ nifi_data_dir }}/etc/keystore.jks {{ keystorepass }} {{ nifi_global_key_password }} {{ keystorepass }} {{ nifi_global_keystore_password }} {{ truststorepass }} {{ nifi_global_truststore_password }} {{ nifi_data_dir }}/etc/truststore.jks
  when:
    - keystorepass != nifi_global_keystore_password
    - truststorepass != nifi_global_truststore_password

- name: update config.json
  #when:
  #  - keystorepass != nifi_global_keystore_password
  #  - truststorepass != nifi_global_truststore_password
  template:
    src: config.json
    dest: "{{ nifi_data_dir }}/etc/config.json"
    owner: "{{ nifi_user }}"
    group: "{{ nifi_user }}"
    mode: '0644'
####

- name: Ensure nifi symlink
  file:
    src: "{{ nifi_base_dir }}/nifi-{{ nifi_version }}"
    dest: "{{ nifi_home }}"
    state: link
    owner: nifi
    group: nifi
  notify:
    - restart nifi

- name: Create nifi systemd service
  template: src=nifi.service.j2 dest="{{ nifi_service }}" owner=root group=root mode=0644
  notify:
    - reload systemctl
    - restart nifi
  when: ansible_distribution == "CentOS" and ansible_distribution_major_version >= "7"
  tags: [ service ]

- name: Ensure nifi-required directories exist and are world-readable
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ nifi_user }}"
    group: "{{ nifi_user }}"
    mode: 0755
  with_items:
    - "{{ nifi_conf_dir }}"
    - "{{ nifi_log_dir }}"
    - "{{ nifi_pid_dir }}"
    - "{{ nifi_nar_dir }}"
    - "{{ nifi_work_dir }}"
    - "{{ nifi_etc_dir }}"
    - "{{ nifi_database_repository }}"
    - "{{ nifi_flowfile_repository }}"

- name: ensure nifi content repo directories exist
  file: path="{{ item }}" state=directory owner="{{ nifi_user }}" group="{{ nifi_user }}" mode=0755
  with_items: "{{ nifi_content_repositories }}"

- name: ensure nifi provenance repo directories exist
  file: path="{{ item }}" state=directory owner="{{ nifi_user }}" group="{{ nifi_user }}" mode=0755
  with_items: "{{ nifi_provenance_repositories }}"

#- name: ensure zookeeper data directory exists
#  file: path="{{ nifi_zookeeper_dir }}" state=directory owner="{{ nifi_user }}" group="{{ nifi_user }}" mode=0755
#  when: nifi_state_management_embedded_zookeeper_start

#- name: add myid file for embedded zookeeper
#  template: src="myid.j2" dest="{{ nifi_zookeeper_dir }}/myid" owner="{{ nifi_user }}" group="{{ nifi_user }}" mode='0644'
#  when: nifi_state_management_embedded_zookeeper_start

- name: ensure nifi extra directories exist
  file: path="{{ item }}" state=directory owner="{{ nifi_user }}" group="{{ nifi_user }}" mode=0755
  with_items: "{{ nifi_extra_dirs | default([]) }}"
